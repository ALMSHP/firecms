import React, { useMemo } from "react";

import OpenInNewIcon from "@mui/icons-material/OpenInNew";

import { ErrorMessage } from "formik";

import { Entity, EntityStatus, EnumValueConfig, EnumValues, FireCMSContext } from "../../types";

import { useClipboard, useFireCMSContext, useSnackbarController } from "../../hooks";
import { enumToObjectEntries, Select, TextInput } from "../../core";
import { IconButton } from "../../components";
import { Tooltip } from "../../components/Tooltip";
import { MenuItem } from "@mui/material";

export function CustomIdField<M extends Record<string, any>>({
                                                                 customId,
                                                                 entityId,
                                                                 status,
                                                                 onChange,
                                                                 error,
                                                                 entity
                                                             }: {
    customId?: boolean | EnumValues | "optional"
    entityId?: string
    status: EntityStatus,
    onChange: (id?: string) => void,
    error: boolean,
    entity: Entity<M> | undefined
}) {

    const disabled = status === "existing" || !customId;
    const idSetAutomatically = status !== "existing" && !customId;

    const enumValues: EnumValueConfig[] | undefined = useMemo(() => {
        if (!customId || typeof customId === "boolean" || customId === "optional")
            return undefined;
        return enumToObjectEntries(customId);
    }, [customId]);

    const snackbarController = useSnackbarController();
    const { copy } = useClipboard({
        onSuccess: (text) => snackbarController.open({
            type: "success",
            message: `Copied ${text}`
        })
    });

    const appConfig: FireCMSContext | undefined = useFireCMSContext();

    const fieldProps: any = {
        label: idSetAutomatically ? "ID is set automatically" : "ID",
        disabled,
        name: "id",
        value: (entity && status === "existing" ? entity.id : entityId) ?? "",
        endAdornment: entity
            ? (
                <>

                    <Tooltip title={"Copy"}>
                        <IconButton onClick={(e) => copy(entity.id)}
                                    aria-label="copy-id">
                            <svg
                                fill={"currentColor"}
                                width="20" height="20" viewBox="0 0 24 24">
                                <path
                                    d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z"/>
                            </svg>
                        </IconButton>
                    </Tooltip>

                    {appConfig?.entityLinkBuilder &&
                        <Tooltip title={"Open in the console"}>
                            <IconButton component={"a"}
                                        href={appConfig.entityLinkBuilder({ entity })}
                                        rel="noopener noreferrer"
                                        target="_blank"
                                        onClick={(e) => e.stopPropagation()}
                                        aria-label="go-to-datasource">
                                <OpenInNewIcon fontSize={"small"}/>
                            </IconButton>
                        </Tooltip>}

                </>
            )
            : undefined

    };

    return (
        <>

            {enumValues &&
                <Select
                    fullWidth
                    disableUnderline={true}
                    error={error}
                    {...fieldProps}
                    onChange={(event: any) => onChange(event.target.value)}>
                    {enumValues.map((enumConfig) =>
                        <MenuItem
                            key={`custom-id-item-${enumConfig.id}`}
                            value={enumConfig.id}>
                            {`${enumConfig.id} - ${enumConfig.label}`}
                        </MenuItem>)}
                </Select>}

            {!enumValues &&
                <TextInput {...fieldProps}
                           error={error}
                           placeholder={customId === "optional" ? "Autogenerated ID, it can be manually changed" : (status === "new" || status === "copy" ? "ID of the new document" : "ID of the document")}
                           onChange={(event) => {
                               let value = event.target.value;
                               if (value) value = value.trim();
                               return onChange(value.length ? value : undefined);
                           }}/>}

            <ErrorMessage name={"id"}
                          component="div">
                {(_) => "You need to specify an ID"}
            </ErrorMessage>

        </>
    );
}
