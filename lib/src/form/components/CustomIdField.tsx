import React, { useMemo } from "react";

import { ErrorMessage } from "formik";

import { Entity, EntityStatus, EnumValueConfig, EnumValues, FireCMSContext } from "../../types";

import { useClipboard, useFireCMSContext, useSnackbarController } from "../../hooks";
import { enumToObjectEntries, Select, SelectItem, TextField } from "../../core";
import { IconButton, Tooltip } from "../../components";
import { OpenInNewIcon , ContentCopyIcon } from "../../icons";
import { EnumValuesChip } from "../../preview";

export function CustomIdField<M extends Record<string, any>>({
                                                                 customId,
                                                                 entityId,
                                                                 status,
                                                                 onChange,
                                                                 error,
                                                                 entity
                                                             }: {
    customId?: boolean | EnumValues | "optional"
    entityId?: string
    status: EntityStatus,
    onChange: (id?: string) => void,
    error: boolean,
    entity: Entity<M> | undefined
}) {

    const disabled = status === "existing" || !customId;
    const idSetAutomatically = status !== "existing" && !customId;

    const enumValues: EnumValueConfig[] | undefined = useMemo(() => {
        if (!customId || typeof customId === "boolean" || customId === "optional")
            return undefined;
        return enumToObjectEntries(customId);
    }, [customId]);

    const snackbarController = useSnackbarController();
    const { copy } = useClipboard({
        onSuccess: (text) => snackbarController.open({
            type: "success",
            message: `Copied ${text}`
        })
    });

    const appConfig: FireCMSContext | undefined = useFireCMSContext();

    const fieldProps = {
        label: idSetAutomatically ? "ID is set automatically" : "ID",
        disabled,
        name: "id",
        value: (entity && status === "existing" ? entity.id : entityId) ?? "",
        endAdornment: entity
            ? (
                <>

                    <Tooltip title={"Copy"}>
                        <IconButton onClick={(e) => copy(entity.id)}
                                    aria-label="copy-id">
                            <ContentCopyIcon size={"small"}/>
                        </IconButton>
                    </Tooltip>

                    {appConfig?.entityLinkBuilder &&
                        <Tooltip title={"Open in the console"}>
                            <IconButton component={"a"}
                                        href={appConfig.entityLinkBuilder({ entity })}
                                        rel="noopener noreferrer"
                                        target="_blank"
                                        onClick={(e) => e.stopPropagation()}
                                        aria-label="go-to-datasource">
                                <OpenInNewIcon size={"small"}/>
                            </IconButton>
                        </Tooltip>}

                </>
            )
            : undefined

    };

    return (
        <>

            {enumValues &&
                <Select
                    error={error}
                    onValueChange={(v) => onChange(v as string)}
                    {...fieldProps}
                    renderValue={(option) => {
                        const enumConfig = enumValues.find(e => e.id === option);
                        if (!enumConfig) return option;
                        return `${enumConfig.id} - ${enumConfig.label}`;
                    }}
                >
                    {enumValues.map((enumConfig) => (
                        <SelectItem
                            key={enumConfig.id}
                            value={String(enumConfig.id)}>
                            <EnumValuesChip
                                enumKey={enumConfig.id}
                                enumValues={enumValues}
                                size={"medium"}/>
                        </SelectItem>)
                    )}
                </Select>}

            {!enumValues &&
                <TextField {...fieldProps}
                           error={error}
                           placeholder={customId === "optional" ? "Autogenerated ID, it can be manually changed" : (status === "new" || status === "copy" ? "ID of the new document" : "ID of the document")}
                           onChange={(event) => {
                               let value = event.target.value;
                               if (value) value = value.trim();
                               return onChange(value.length ? value : undefined);
                           }}/>}

            <ErrorMessage name={"id"}
                          component="div">
                {(_) => "You need to specify an ID"}
            </ErrorMessage>

        </>
    );
}
